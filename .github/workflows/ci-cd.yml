name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/the-dot

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
        - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
        - 6379:6379

    strategy:
      matrix:
        service:
        - auth-service
        - user-service
        - application-service
        - ticket-service
        - project-service
        - comment-service
        - reporting-service
        - audit-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: services/${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        npm ci

    - name: Generate Prisma client
      run: |
        cd services/${{ matrix.service }}
        if [ -f "prisma/schema.prisma" ]; then
          npx prisma generate
        fi

    - name: Run database migrations
      run: |
        cd services/${{ matrix.service }}
        if [ -f "prisma/schema.prisma" ]; then
          npx prisma migrate deploy
        fi
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run unit tests
      run: |
        cd services/${{ matrix.service }}
        npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret

    - name: Run linting
      run: |
        cd services/${{ matrix.service }}
        npm run lint

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [ test, test-frontend ]
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service:
        - auth-service
        - user-service
        - application-service
        - ticket-service
        - project-service
        - comment-service
        - reporting-service
        - audit-service
        - frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service == 'frontend' && 'frontend' || format('services/{0}', matrix.service) }}
        file: ./${{ matrix.service == 'frontend' && 'frontend' || format('services/{0}', matrix.service) }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service:
        - auth-service
        - user-service
        - application-service
        - ticket-service
        - project-service
        - comment-service
        - reporting-service
        - audit-service
        - frontend

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ build-and-push, security-scan ]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig

        # Update image tags in Kubernetes manifests
        for service in auth-service user-service application-service ticket-service project-service comment-service reporting-service audit-service frontend; do
          sed -i "s|image: the-dot/${service}:latest|image: ${{ env.IMAGE_PREFIX }}-${service}:${{ github.sha }}|g" k8s/*${service}*.yaml
        done

        # Apply Kubernetes manifests
        kubectl apply -f k8s/ -n the-dot-staging

        # Wait for deployment to complete
        kubectl rollout status deployment/auth-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/user-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/application-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/ticket-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/project-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/comment-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/reporting-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/audit-service -n the-dot-staging --timeout=300s
        kubectl rollout status deployment/frontend -n the-dot-staging --timeout=300s

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ deploy-staging ]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig

        # Update image tags in Kubernetes manifests
        for service in auth-service user-service application-service ticket-service project-service comment-service reporting-service audit-service frontend; do
          sed -i "s|image: the-dot/${service}:latest|image: ${{ env.IMAGE_PREFIX }}-${service}:${{ github.sha }}|g" k8s/*${service}*.yaml
        done

        # Apply Kubernetes manifests
        kubectl apply -f k8s/ -n the-dot-production

        # Wait for deployment to complete
        kubectl rollout status deployment/auth-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/user-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/application-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/ticket-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/project-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/comment-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/reporting-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/audit-service -n the-dot-production --timeout=600s
        kubectl rollout status deployment/frontend -n the-dot-production --timeout=600s

    - name: Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
