// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority @default(MEDIUM)
  
  // Ownership and assignment
  ownerId     String
  managerId   String?
  
  // Dates
  startDate   DateTime?
  endDate     DateTime?
  dueDate     DateTime?
  
  // Progress tracking
  progress    Int      @default(0) // 0-100 percentage
  budget      Float?
  
  // Metadata
  isActive    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  tasks       Task[]
  milestones  Milestone[]
  members     ProjectMember[]
  
  @@map("projects")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority @default(MEDIUM)
  
  // Assignment
  projectId   String
  assigneeId  String?
  reporterId  String
  
  // Dates
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?
  
  // Progress
  estimatedHours Float?
  actualHours    Float?
  progress       Int      @default(0)
  
  // Metadata
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}

model Milestone {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      MilestoneStatus @default(PENDING)
  
  // Dates
  dueDate     DateTime
  completedAt DateTime?
  
  // Metadata
  projectId   String
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("milestones")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  
  // Timestamps
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  
  // Relationships
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_members")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String // e.g., 'ticket', 'project', 'user'
  action      String // e.g., 'create', 'read', 'update', 'delete'

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  role         Role
  permissionId String

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@map("role_permissions")
}

// Enums
enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum Role {
  ADMIN
  SUPPORT_L1
  SUPPORT_L2
  SUPPORT_L3
  DEVELOPER
  PROJECT_MANAGER
  CLIENT
}
