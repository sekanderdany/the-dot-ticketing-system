// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  password    String
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  role        Role     @default(CLIENT)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relationships
  refreshTokens RefreshToken[]
  sessions      Session[]
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String // e.g., 'ticket', 'project', 'user'
  action      String // e.g., 'create', 'read', 'update', 'delete'
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  rolePermissions RolePermission[]
  
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  role         Role
  permissionId String
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relationships
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([role, permissionId])
  @@map("role_permissions")
}

model Report {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        ReportType
  format      ReportFormat @default(CSV)
  status      ReportStatus @default(PENDING)
  
  // Parameters
  parameters  Json? // Store filter parameters as JSON
  
  // Generation details
  requestedBy String
  generatedAt DateTime?
  expiresAt   DateTime?
  
  // File details
  fileName    String?
  fileSize    Int?
  filePath    String?
  downloadUrl String?
  
  // Metadata
  isScheduled Boolean @default(false)
  scheduleExpression String? // Cron expression for scheduled reports
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("reports")
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        ReportType
  
  // Template configuration
  columns     Json // Column definitions
  filters     Json? // Default filters
  sorting     Json? // Default sorting
  
  // Access control
  isPublic    Boolean @default(false)
  createdBy   String
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("report_templates")
}

enum ReportType {
  TICKETS
  PROJECTS
  USERS
  APPLICATIONS
  AUDIT
  TIME_TRACKING
  SLA_PERFORMANCE
  CUSTOM
}

enum ReportFormat {
  CSV
  EXCEL
  PDF
  JSON
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum Role {
  ADMIN
  SUPPORT_L1
  SUPPORT_L2
  SUPPORT_L3
  DEVELOPER
  PROJECT_MANAGER
  CLIENT
}
